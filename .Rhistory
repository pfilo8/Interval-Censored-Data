source('~/datawalk/automl/scripts/001_LoadingLibraries.R', echo=TRUE)
install.packages(c("funModeling", "h2o", "ingredients", "mlr", "tidyverse"))
library(tidyverse)
library(mlr)
library(funModeling)
library(DALEX)
library(h2o)
library(ingredients)
library(tidyverse)
library(mlr)
library(funModeling)
install.packages("tidyverse")
library(tidyverse)
library(mlr)
library(funModeling)
library(DALEX)
library(h2o)
library(ingredients)
install.packages(c("funModeling", "h2o", "ingredients", "mlr", "tidyverse"))
install.packages("tidyverse")
library(tidyverse)
install.packages("mlr")
library(mlr)
library(funModeling)
install.packages('funModeling')
install.packages('gplots')
Sys.time()
class(Sys.time())
str(Sys.time())
data.frame()
data.frame(a = [12,23,12], b = 1)
data.frame(a = list(1,2,3), b = 1)
data.frame(a = 1, b = c(1,2,3,431,2))
data.frame(a = 1, `b asdas` = c(1,2,3,431,2))
data.frame(a = c(1,2,32,3), b = (2,123,312,213))
data.frame(a = c(1,2,32,3), b = (2,123,312,213))
?data.frame
data.frame(a = c(1,2,32,3), b = c(2,123,312,213))
data.frame(a = c(1,2,32,3), b = c(2,123,312,213)) -> x
x
y <- data.frame(z = c(1,21,321,12), y = x$a)
y
x <- data.frame(a = c(12,123,12,21), b = c(12,123,123123,14))
library(dplyr)
ids <- x %>% select(a)
ids
data.frame(z = c(12,12,21,12), y = ids)
library(dplyr)
x <- data.frame(a = c(12,123,12,21), b = c(12,123,123123,14))
ids <- x %>% select('a')
ids
COL_NAME = 'a'
x %>% select(COL_NAME)
x %>% select(all_of(COL_NAME))
?all_of
x %>% select(-COL_NAME)
x
ids
data.frame(x = ids)
ids$a
data.frame(x = ids$a)
select(ids, a)
ids[a]
ids['a']
COL_NAME = 'a'
ids[COL_NAME]
ids[COL_NAME, ]
ids[,COL_NAME]
data.frame(x = ids[,COL_NAME])
?all_of
h2o.init()
library(h2o)
h2o.init()
h2o.shutdown()
as.character(Sys.time())
install.packages('DALEX')
library(DALEX)
source('/media/veracrypt1/datawalk/app-center/apps/datawalk-automl/docker/install_packages.R', echo=TRUE)
library(DALEX)
?predict_parts_oscillations
library(iBreakDown)
library(ingredients)
?calculate_oscillations
?shap
install.packages("devtools")
devtools::install_github("twitter/AnomalyDetection")
data(raw_data)
res = AnomalyDetectionTs(raw_data, max_anoms=0.02, direction='both', plot=TRUE)
res$plot
library(AnomalyDetection)
data(raw_data)
res = AnomalyDetectionTs(raw_data, max_anoms=0.02, direction='both', plot=TRUE)
res
plot(res)
res$plot
data(raw_data)
res = AnomalyDetectionTs(raw_data, max_anoms=0.02, direction='both', plot=TRUE)
res$plot
res
View(res)
View(raw_data)
plot(raw_data)
res$anoms
plot(res$anoms)
library(catboost)
features <- data.frame(feature1 = c(1, 2, 3), feature2 = c('A', 'B', 'C'))
labels <- c(0, 0, 1)
train_pool <- catboost.load_pool(data = features, label = labels)
install.packages("catboost")
library(catboost)
features <- data.frame(feature1 = c(1, 2, 3), feature2 = c('A', 'B', 'C'))
labels <- c(0, 0, 1)
train_pool <- catboost.load_pool(data = features, label = labels)
as.charaster(Sys.time())
as.character(Sys.time())
setwd("~/Study/Statistical-Packages/Raport2")
rexp(1, rate=10)
rexp(1, rate=10)
rexp(1, rate=10)
inspection_times <- c()
inspection_times <- c(inspection_times, 1)
inspection_times
list(a=1, b=2)
generate_censored_one_sample <- function(lambda, nu, t_start, t_end) {
light_failure_time <- rexp(1, rate = lambda) + t_start
current_time <- t_start
inspection_times <- c()
while(current_time < light_failure_time){
inspection <- rexp(1, rate = nu)
inspection_times <- c(inspection_times, inspection)
current_time <- current_time + inspection
}
return list(inspection_times=inspection_times, light_failure_time=light_failure_time-t_start)
}
generate_censored_one_sample <- function(lambda, nu, t_start, t_end) {
light_failure_time <- rexp(1, rate = lambda) + t_start
current_time <- t_start
inspection_times <- c()
while(current_time < light_failure_time){
inspection <- rexp(1, rate = nu)
inspection_times <- c(inspection_times, inspection)
current_time <- current_time + inspection
}
return(list(inspection_times=inspection_times, light_failure_time=light_failure_time-t_start))
}
generate_censored_one_sample(1/10, 1/5, 0, 20)
generate_censored_one_sample(1/10, 1/5, 0, 20)
generate_censored_one_sample(1/10, 1/5, 0, 20)
a <- generate_censored_one_sample(1/10, 1/5, 0, 20)
a
cumsum(a$inspection_times)
generate_censored_one_sample <- function(lambda, nu, t_start, t_end) {
light_failure_time <- rexp(1, rate = lambda) + t_start
current_time <- t_start
inspection_times <- c()
while(current_time < light_failure_time){
inspection <- rexp(1, rate = nu)
inspection_times <- c(inspection_times, inspection)
current_time <- current_time + inspection
}
return(list(inspection_times=cumsum(inspection_times), light_failure_time=light_failure_time-t_start))
}
generate_censored_one_sample(1/10, 1/5, 0, 20)
generate_censored_one_sample(1/10, 1/5, 0, 20)
generate_censored_one_sample(1/10, 1/5, 0, 20)
generate_censored_one_sample(1/10, 1/5, 0, 20)
generate_censored_one_sample <- function(lambda, nu, t_start, t_end) {
light_failure_time <- rexp(1, rate = lambda) + t_start
current_time <- t_start
inspection_times <- c()
while(current_time < light_failure_time || current_time>t_end){
inspection <- rexp(1, rate = nu)
inspection_times <- c(inspection_times, inspection)
current_time <- current_time + inspection
}
return(list(inspection_times=cumsum(inspection_times), light_failure_time=light_failure_time-t_start))
}
generate_censored_one_sample(1/10, 1/5, 0, 20)
generate_censored_one_sample(1/10, 1/5, 0, 20)
generate_censored_one_sample <- function(lambda, nu, t_start, t_end) {
light_failure_time <- rexp(1, rate = lambda) + t_start
current_time <- t_start
inspection_times <- c()
while(current_time < light_failure_time & current_time<t_end){
inspection <- rexp(1, rate = nu)
inspection_times <- c(inspection_times, inspection)
current_time <- current_time + inspection
}
return(list(inspection_times=cumsum(inspection_times), light_failure_time=light_failure_time-t_start))
}
generate_censored_one_sample(1/10, 1/5, 0, 20)
generate_censored_one_sample(1/10, 1/5, 0, 20)
generate_censored_one_sample(1/10, 1/5, 0, 20)
generate_censored_one_sample(1/10, 1/5, 0, 20)
generate_censored_one_sample(1/10, 1/5, 0, 20)
generate_censored_one_sample(1/10, 1/5, 0, 20)
x <- list()
x$a <- c(1)
x$b <- c(2)
x
x$a = c(x$a, 2)
x
